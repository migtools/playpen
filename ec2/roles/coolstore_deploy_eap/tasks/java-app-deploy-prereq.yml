---
# check if podman container myPostgresDb is running
- name: Check if podman container myPostgresDb is running
  ansible.builtin.shell: podman ps -a | grep myPostgresDb
  register: podman_container_status
  ignore_errors: true

# create podman db container
- name: Create podman db container
  ansible.builtin.shell: podman run --name myPostgresDb -p 5432:5432 -e POSTGRES_USER=postgresUser -e POSTGRES_PASSWORD=postgresPW -e POSTGRES_DB=postgresDB -d docker.io/library/postgres:10
  become: true
  when: podman_container_status.rc != 0

- name: "JBoss EAP installation and configuration 1"
  vars:
    wildfly_install_workdir: '/opt'
    wildfly_version: '7.4.0'
    install_name: jboss-eap
    wildfly_archive_filename: "{{ install_name }}-{{ wildfly_version }}.zip"
    wildfly_user: "{{ install_name }}"
    wildfly_group: "{{ install_name }}"
    wildfly_config_base: standalone-full.xml
    wildfly_home: "{{ wildfly_install_workdir }}/{{ install_name }}-{{ 7.4 }}"
    wildfly_driver_module_name: "org.postgresql"
    wildfly_driver_version: "42.5.4"
    wildfly_driver_jar_filename: "postgresql-{{ wildfly_driver_version }}.jar"
    wildfly_driver_jar_url: "https://jdbc.postgresql.org/download/postgresql-42.5.4.jar"
  include_role:
    name: middleware_automation.wildfly.wildfly_driver

#restart jboss server
- name: Restart JBoss EAP
  ansible.builtin.service:
    name: jboss-eap
    state: restarted
  become: true
# copy files/postgres.cli to /opt/jboss-eap-7.4/bin
- name: Copy postgres.cli to /opt/jboss-eap-7.4/bin
  ansible.builtin.copy:
    src: files/postgres.cli
    dest: /opt/jboss-eap-7.4/bin
    owner: jboss-eap
    group: jboss-eap
    mode: 0644
  become: true

- name: "Execute jboss-cli script to configure db and messagequeue"
  vars:
    wildfly_install_workdir: '/opt'
    wildfly_version: '7.4.0'
    install_name: jboss-eap
    wildfly_home: "{{ wildfly_install_workdir }}/{{ install_name }}-{{ 7.4 }}"
    wildfly_no_restart_after_patch: False
    jboss_cli_file: /opt/jboss-eap-7.4/bin/postgres.cli
  include_role:
    name: middleware_automation.wildfly.wildfly_utils
    tasks_from: jboss_cli.yml

- name: Create keycloak group
  ansible.builtin.group:
    name: keycloak
    state: present
  become: true

- name: Create keycloak user
  ansible.builtin.user:
    name: keycloak
    group: keycloak
    createhome: yes
    shell: /bin/bash
    state: present
  become: true


- name: Generate SSL certificate and key
  command: "openssl req -subj '/CN=Coolstore/O=Test Keycloak./C=US' -newkey rsa:2048 -nodes -keyout /etc/pki/tls/certs/key.pem -x509 -days 365 -out /etc/pki/tls/certs/cert.pem"
  become: true 

- name: Change ownership of SSL certificate and key
  ansible.builtin.file:
    path: "{{ item }}"
    owner: keycloak
    group: keycloak
    state: file
  loop:
    - /etc/pki/tls/certs/key.pem
    - /etc/pki/tls/certs/cert.pem
  become: true


# install keycloak using middleware_automation.keycloak role
- name: Install Keycloak
  include_role:
    name: middleware_automation.keycloak.keycloak_quarkus
  vars:
    keycloak_quarkus_admin_pass: "adminchangemelater"
    keycloak_quarkus_dest: /usr/keycloak
    keycloak_quarkus_frontend_url: "https://{{ inventory_hostname }}:8444/"
    keycloak_quarkus_http_port: 8081
    keycloak_quarkus_https_key_file_enabled: true
    keycloak_quarkus_https_port: 8444
    keycloak_quarkus_host: "{{ inventory_hostname }}"
    keycloak_quarkus_key_file: /etc/pki/tls/certs/key.pem
    keycloak_quarkus_cert_file: /etc/pki/tls/certs/cert.pem
    keycloak_quarkus_version: 20.0.5
    keycloak_quarkus_offline_install: true
